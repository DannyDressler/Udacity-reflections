What happens when you initialize a repository? Why do you need to do it?

	I can initialize any folder by using git init to allow git to recognise this folder as a git repository. 
	This is necessary for git to store hidden files and directories, such as commits or logs. 
	These files or directories are marked with a point before the name to indicate that the cannot be seen on the GUI.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The staging area is an intermediate area between the working directory and the repository.
	Since the working directory and what gets saved by Git are essentially decoupled, 
	this allows the developer to build up their commits however they want, and not in a fashion where the VCS tells you. 
	Since there’s a layer between when Git actually saves the data, you gain a lot more flexibility and control.

How can you use the staging area to make sure you have one commit per logical
change?

	I can add single files to the staging area and leave others in the the working directory.
	Then I can commit only those changes that are in the staging area using git commit.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	When I want to implement a new language or a new feature I can use branches if the master should remain unchanged.
	Branches allows me to implement changes or modification in the code while leaving the master as it is.
	I can have a master branch that allows remains fully operational, while e.g. a developmental or experimental branch can break.
	I can even for on a specific feature in a branch, and switch to another one if I get bored without affecting the main code.

How do the diagrams help you visualize the branch structure?

	The diagrams allow me to get a better overview about the branches I have created. 
	In this way I can easily manage different features and collaborate more easily.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git’s automatic merging vs. always doing merges
manually?
